\documentclass{beamer}
\usetheme{metropolis}
\usepackage[utf8]{inputenc}
\usepackage{amsfonts}
\usepackage{amsmath}
\usepackage{natbib}
\usepackage{graphicx}
\usepackage{array,booktabs,tabularx}
\usepackage{epstopdf}
\usepackage{colortbl, xcolor}
\usepackage{url}

\newcommand\Fontvi{\fontsize{6}{7.2}\selectfont}

\title{Simplified alphabets in protein analysis}
\date{}
\author{Michał Burdukiewicz}
\institute{Department of Genomics, University of Wrocław}

\begin{document}

  <<knitrIntro, echo = FALSE, message=FALSE,warning=FALSE>>=
source("my_ggplot_theme.R")

library(dplyr)
library(reshape2)
library(xtable)
library(biogram)
library(seqinr)
library(VennDiagram)
  
source("script.R")  

print_bt <- function(x) {
  rws <- 0L:(nrow(x) - 1)
  col <- c("\\rowcolor{green!10}", "\\rowcolor{blue!10}", "\\rowcolor{red!10}", "\\rowcolor{yellow!10}")
  print(xtable(x, digits = 0), booktabs = TRUE,
        add.to.row = list(pos = as.list(rws), command = col),
        print.results = FALSE)
}

print_bt2 <- function(x) {
  rws <- seq(1, nrow(x) - 1, by = 2)
  col <- rep("\\rowcolor[gray]{0.85}", length(rws))
  print(xtable(x, digits = 0), booktabs = TRUE,
        add.to.row = list(pos = as.list(rws), command = col),
        print.results = FALSE, include.rownames = FALSE)
}  
  
cls <- c("\\colorbox{green!10}", "\\colorbox{blue!10}", "\\colorbox{red!10}", "\\colorbox{yellow!10}")

group2df <- function(group_list, caption = NULL, label = NULL) {
  tab <- data.frame(Groups = sapply(group_list, function(i)
    paste0(toupper(sort(i)), collapse = ", ")))
  tab <- cbind(ID = 1L:nrow(tab), tab)
  rws <- seq(1, nrow(tab) - 1, by = 2)
  col <- rep("\\rowcolor[gray]{0.85}", length(rws))
  colnames(tab) <- c("Subgroup ID", "Amino acids")
  res <- print(xtable(tab, caption = caption, label = label), 
               include.rownames = FALSE, booktabs = TRUE,
               add.to.row = list(pos = as.list(rws), command = col), print.results = FALSE, 
               caption.placement = "top", sanitize.text.function = identity, 
               sanitize.rownames.function = identity)
  #res
  print(xtable(tab))
}  
  
amyloids_plot <- read.csv("amyloid_plot_data.csv")

levels(amyloids_plot[["et"]]) <- c("Best-performing simplified alphabet", 
                                   "simplified alphabet", "Full alphabet", 
                                   "Standard simplified alphabet")


amyloids_plot[["len_range"]] <- factor(amyloids_plot[["len_range"]], 
                                       levels = c("Test peptide length: 6 ", "Test peptide length: 7-10", 
                                                  "Test peptide length: 11-15", "Test peptide length: 16-25"))

subdat <- filter(amyloids_plot, pos == "Training peptide length: 6")

best_enc <- list(c("G"), 
                 c("K", "P", "R"),
                 c("I", "L", "V"),
                 c("F", "W", "Y"),
                 c("A", "C", "H", "M"),
                 c("D", "E", "N", "Q", "S", "T"))
names(best_enc) <- 1L:6


@
  

\maketitle

\begin{frame}{Outline}

\tableofcontents

\end{frame} 



\section{Simplified alphabets}

\begin{frame}
Simplified alphabets:
\begin{itemize}
\item are based on grouping amino acids with similar physicochemical properties,
\item ease computational analysis of a sequence~\citep{murphy_simplified_2000},
\item create more explicite models.
\end{itemize}
\end{frame}


\begin{frame}  
Two sequences that are drastically different considering their amino acids composition can have the same physicochemical properties.


<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
seq1 <- c("f", "k", "v", "w", "p", "d", "h", "g", "s", "g")
seq2 <- c("y", "c", "m", "i", "y", "r", "a", "q", "t", "n")
@


\begin{columns}

\begin{column}{0.2\textwidth}

Sequence I: 

Sequence II: 
\end{column}

\begin{column}{0.2\textwidth}
 
\texttt{\Sexpr{toupper(paste0(seq1, collapse = ""))}}

\texttt{\Sexpr{toupper(paste0(seq2, collapse = ""))}}
\end{column}

\end{columns}

\end{frame}  


\begin{frame}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
seq_dat <- rbind(data.frame(seq = "Sequence I", pos = 1L:10, 
                            aa = seq1, val = aaprop["ARGP820101", seq1]),
                 data.frame(seq = "Sequence II", pos = 1L:10, 
                            aa = seq2, val = aaprop["ARGP820101", seq2])) %>% 
  mutate(hydroph = val < 0.4)

ggplot(seq_dat, aes(x = factor(pos), y = val, label = toupper(aa), 
                    group = seq)) +
  geom_text(vjust = "outward", size = 5, show.legend = FALSE) +
  #geom_point(size = 0) +
  geom_line(linetype = "dotted", color = "black") +
  #geom_hline(yintercept = 0.4, linetype = "dashed") +
  facet_wrap(~ seq, ncol = 1) +
  scale_x_discrete("Position") +
  scale_y_continuous("Hydrophobicity (Argos et al., 1982)", expand = c(.1, .1)) +
  scale_color_manual(values = c("red", "blue")) +
  my_theme
@
\end{frame}  


\begin{frame}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
ggplot(seq_dat, aes(x = factor(pos), y = val, label = toupper(aa), 
                    group = seq, colour = hydroph)) +
  geom_hline(yintercept = 0.3, linetype = "dashed", size = 1) +
  geom_text(vjust = "outward", size = 5, show.legend = FALSE) +
  #geom_point(size = 0) +
  geom_line(linetype = "dotted", color = "black") +
  facet_wrap(~ seq, ncol = 1) +
  scale_x_discrete("Position") +
  scale_y_continuous("Hydrophobicity (Argos et al., 1982)", expand = c(.1, .1)) +
  scale_color_manual(values = c("red", "blue")) +
  my_theme
@
\end{frame}

\begin{frame}
\begin{table}
\begin{tabular}{cl}
\toprule
Subgroup & Amino acid \\ 
\midrule
  1 & C, I, L, K, M, F, P, W, Y, V \\ 
  2 & A, D, E, G, H, N, Q, R, S, T \\ 
\bottomrule
\end{tabular}
\end{table}

\begin{columns}

\begin{column}{0.2\textwidth}

Sequence I: 

Sequence II: 
\end{column}

\begin{column}{0.2\textwidth}
 
\texttt{\Sexpr{toupper(paste0(seq1, collapse = ""))}}

\texttt{\Sexpr{toupper(paste0(seq2, collapse = ""))}}
\end{column}

\end{columns}

\end{frame}  


\begin{frame}
\begin{table}
\begin{tabular}{cl}
\toprule
Subgroup & Amino acid \\ 
\midrule
  \textcolor{red}{1} & \textcolor{red}{C, I, L, K, M, F, P, W, Y, V} \\ 
  \textcolor{blue}{2} & \textcolor{blue}{A, D, E, G, H, N, Q, R, S, T} \\ 
\bottomrule
\end{tabular}
\end{table}

\begin{columns}

\begin{column}{0.2\textwidth}

Sequence I: 

Sequence II: 
\end{column}

\begin{column}{0.2\textwidth}
 
\textcolor{red}{\texttt{\Sexpr{toupper(paste0(seq1[1L:5], collapse = ""))}}}\textcolor{blue}{\texttt{\Sexpr{toupper(paste0(seq1[6L:10], collapse = ""))}}}

\textcolor{red}{\texttt{\Sexpr{toupper(paste0(seq2[1L:5], collapse = ""))}}}\textcolor{blue}{\texttt{\Sexpr{toupper(paste0(seq2[6L:10], collapse = ""))}}}
\end{column}

\end{columns}

\end{frame}  

\section{Signal peptides}

\begin{frame}

\begin{figure} 
\includegraphics[width=0.75\textwidth]{static_figure/SP.png}
\end{figure}

Signal peptides possess three distinct domains with variable length and characteristic amino acid composition~\citep{hegde_surprising_2006}:
      \begin{itemize}
        \item n-region: mostly basic residues~\citep{nielsen_prediction_1998},
        \item h-region: strongly hydrophobic residues~\citep{nielsen_prediction_1998},
        \item c-region: a few polar, uncharged residues, similar to the mature protein.
      \end{itemize}
\end{frame}


%Peptydy sygnałowe rozpoczynają się naładowanym dodatnio n-regionem, po którym występuje hydrofobowy h-region i c-region zakończony miejscem cięcia rozpoznawanym przez peptydazę sygnałową. 

  
\begin{frame}
Amino acid composition of signal peptides differ between eukaryotes and bacteria (gram positive and gram negative). Therefore, predictors of signal peptides are not universal and had to be taxon-specific.

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
freq_df <- read.csv("./results/signal_freq.csv")

pca_df <- select(freq_df, -status, -taxon, -prot) %>%
  as.matrix %>%
  prcomp(center = TRUE, scale = TRUE) %>%
  getElement("x") %>%
  data.frame() %>%
  cbind(select(freq_df, status, taxon, prot), .) %>% 
  mutate(taxon = factor(taxon, labels = c("Eukaryotes", "Gram-negative", "Gram-positive")),
         status = factor(status, labels = c("Mature protein", "Signal peptide")))

plot_pca <- function(pca)
  ggplot(pca, aes(x = PC1, y = PC2, color = taxon, fill = taxon)) + 
  stat_density2d(aes(fill=taxon, alpha=..level.., linetype = status), 
                 color = "black",
                 contour = TRUE, geom="polygon") +
  scale_shape_discrete("") +
  scale_fill_discrete("") +
  scale_linetype_manual(values = c("solid", "dashed")) +
  scale_alpha_continuous(range = c(0.15, 0.3)) +
  guides(alpha = FALSE) +
  my_theme

filter(pca_df, status == "Signal peptide") %>% 
  plot_pca() + 
  guides(linetype = FALSE) 
  #ggtitle("PCA częstości aminokwasów w peptydach sygnałowych")
@  

PCA of amino acid frequency in signal peptides.
\end{frame}  

\begin{frame}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
filter(pca_df, status == "Signal peptide") %>% 
  plot_pca() + 
  guides(linetype = FALSE) +
  facet_wrap( ~ taxon, nrow = 1)
  #ggtitle("PCA częstości aminokwasów w peptydach sygnałowych")
@  

PCA of amino acid frequency in signal peptides.
\end{frame} 


\begin{frame}{Aim}
Obtain a simplified alphabet to create a unified signal peptide predictor.
\end{frame} 
  

\section{Methodology}

\begin{frame}
The are several algorithm for the effective probing of the alphabet space. They were created mostly with the protein folding/alignment in mind, but can be altered to work in prediction models.

Algorithms:

\begin{itemize}
\item branch and bound (Cannata, 2002),
\item genetic algorithm without mutation (Palensky, 2006),
\item genetic algorithm with mutation \citep{lenckowski_simplifying_2007}.
 \end{itemize}

\end{frame}   
  
\begin{frame}
Genetic algorithm: cadidate solutions are individuals in a evolving population, where survival is depending on the quality of the solution.

New individuals are created through cross-over and mutation of the fittest individuals.
\end{frame}   

\begin{frame}{Mutation operator}
Randomly change assignments of amino acids.
\end{frame}   


\begin{frame}{Crossover operator}
Assignments of amino acids from a single subgroup belonging to a chosen parent alphabet overwrite assignments of amino acids belonging to the other chosen parent alphabet.

\includegraphics[width=0.85\textwidth]{static_figure/ga_co.png}
\end{frame}   


\begin{frame}{Caveat}
Keep the number of groups constant. If any group is lost, randomly revert chosen amino acids to the missing groups.
\end{frame}   


\begin{frame}{Fitness function}
Fitness function: a mean value of multiple $\chi^2$ statistics.

We compare six data sets: 1-grams from signal peptides and mature proteins belonging to gram negative bacteria, gram positive bacteria and eukaryotes. The fitness function for a single comparison $f_{single}$ is the value of $chi^2$ statistic for following data (assuming the simplified alphabet of length 6):

\begin{table}
\centering
\begin{tabular}{l|l|l|l|l|l|l|}
\cline{2-7}
                              & I         & II         & III         & IV         & V         & VI         \\ \hline
\multicolumn{1}{|l|}{Taxon A} & $x_{A,I}$ & $x_{A,II}$ & $x_{A,III}$ & $x_{A,IV}$ & $x_{A,V}$ & $x_{A,VI}$ \\ \hline
\multicolumn{1}{|l|}{Taxon B} & $x_{B,I}$ & $x_{B,II}$ & $x_{B,III}$ & $x_{B,IV}$ & $x_{B,V}$ & $x_{B,VI}$ \\ \hline
\end{tabular}
\end{table}

$x_{TAXON,N-GRAM}$ denotes the count of a specific 1-gram (a latin number) in a specific taxon (A or B).
\end{frame}
 
\begin{frame}{Fitness function}
 $f_{final}$ is an \textbf{arithmetic mean} of multiple $\chi^2$ statistics for all possible taxon comparisons:
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
x <- c("gram negative bacteria", "gram positive bacteria", "eukaryotes")

expand.grid(`Signal peptide origin` = x, `Mature peptide origin` = x) %>% 
  knitr::kable()
@
 
\end{frame}


\section{Results}
 
\begin{frame}{Fitness function}

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
load("./results/cross_signal_alph2.RData")
res6 <- list(max_ftn = max_ftn, mean_ftn = mean_ftn, best_alph = best_alph)
load("./results/cross_signal_alph2_len2.RData")
load("./results/cross_signal_alph2_len3.RData")
load("./results/cross_signal_alph2_len4.RData")
load("./results/cross_signal_alph2_len5.RData")
load("./results/cross_signal_alph2_len7.RData")
load("./results/cross_signal_alph2_len8.RData")

ftn_dat <- lapply(list(res2, res3, res4, res5, res6, res7, res8), function(i) {
  data.frame(generation = 1L:350, 
             #max_ftn = i[["max_ftn"]],
             #mean_ftn = i[["mean_ftn"]],
             max_ftn_n = i[["max_ftn"]]/max(i[["max_ftn"]]),
             mean_ftn_n = i[["mean_ftn"]]/max(i[["max_ftn"]]))
}) %>% do.call(rbind, .) %>% 
  mutate(alph_size = factor(sort(rep(c(2L:8), 350)))) %>% 
  melt(id.vars = c("generation", "alph_size")) %>% 
  rename(ftn = variable) %>% 
  mutate(ftn = factor(ftn, labels = c("Maximum fitness", "Mean fitness")))

ggplot(ftn_dat, aes(x = generation, y = value, color = alph_size, linetype = alph_size)) +
  geom_line() +
  facet_wrap(~ ftn, ncol = 1) +
  scale_x_continuous("Generation") +
  scale_y_continuous("Fitness value (normalized)") +
  scale_color_discrete("Alphabet size") +
  scale_linetype_discrete("Alphabet size") +
  ggtitle("Fitness plot") +
  my_theme +
  theme(legend.key.size = unit(0.3, "inches")) + 
  guides(colour = guide_legend(nrow = 1), linetype = guide_legend(nrow = 1))
@
 
\end{frame} 
 

\begin{frame}{Fitness function (close-up)}

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
ggplot(ftn_dat, aes(x = generation, y = value, color = alph_size, linetype = alph_size)) +
  geom_line() +
  facet_wrap(~ ftn, ncol = 1) +
  scale_x_continuous("Generation") +
  scale_y_continuous("Fitness value (normalized)") +
  scale_color_discrete("Alphabet size") +
  scale_linetype_discrete("Alphabet size") +
  ggtitle("Fitness plot") +
  my_theme +
  coord_cartesian(xlim = c(0, 75)) +
  theme(legend.key.size = unit(0.3, "inches")) + 
  guides(colour = guide_legend(nrow = 1), linetype = guide_legend(nrow = 1))
@
 
\end{frame} 

\begin{frame}{Best simplified alphabets}
To be absolutely sure that we have only alphabets in the fitness plateau, I considered only alphabets from generations 200-350.

To find the most common groupings of amino acids, I computed the co-occurence of amino acids in groups. The co-occurence is defined as the fraction of best-fitness alphabets, where the amino acid I is in the same group as the amino acid II.

\end{frame} 

\begin{frame}

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5.5,results='asis'>>=
aa_freq <- lapply(list(res2, res3, res4, res5, res6, res7, res8), function(i) {
  best_alph <- i[["best_alph"]]
  sapply(names(best_alph[[1]]), function(single_aa)
    sapply(best_alph[200L:350], function(single_alph) {
      gr_id <- single_alph[names(single_alph) == single_aa]
      single_alph == gr_id
    }) %>% rowMeans()
  ) %>%
    data.frame %>% 
    mutate(Var1 = rownames(.)) %>% 
    melt(variable.name = "Var2") %>% 
    mutate(Var1 = toupper(Var1),
           Var2 = toupper(Var2))
}) %>% 
  do.call(rbind, .) %>% 
  mutate(alph_size = factor(paste0("Size: ", sort(rep(2L:8, 400)))))

ggplot(aa_freq, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile(color = "black") +
  scale_x_discrete("Amino acid I") +
  scale_y_discrete("Amino acid II") +
  scale_fill_gradient("Co-occurence", high = "#d17312", low = "#04d1b2") +
  facet_wrap(~ alph_size, ncol = 3) +
  my_theme +
  theme(legend.key.width = unit(0.45, "inches"),
        legend.position=c(.6, .15),
        legend.direction = "horizontal")
@
 
\end{frame} 

\begin{frame}{Preference for small groups}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5.5,results='asis'>>=
alph_len <- lapply(list(res2, res3, res4, res5, res6, res7, res8), function(i) {
  gr_lengths <- do.call(rbind, lapply(i[["best_alph"]][201L:350], function(single_alph) {
    sort(as.vector(table(single_alph)))
  }))
  colnames(gr_lengths) <- paste0("gr", 1L:ncol(gr_lengths))
  data.frame(mean = colMeans(gr_lengths),
             sd = apply(gr_lengths, 2, sd),
             gr_id = 1L:ncol(gr_lengths)) %>% 
    melt(id.vars = "gr_id") %>% 
    mutate(len = ncol(gr_lengths))
}) %>% 
  do.call(rbind, .) %>% 
  mutate(len = paste0("Alphabet length: ", len))

ggplot(filter(alph_len, variable == "mean"), aes(x = factor(gr_id), y = value)) +
  geom_col() +
  facet_wrap(~ len) +
  scale_x_discrete("Subgroup id\n") +
  scale_y_continuous("Mean number of residues in a group") +
  my_theme
@

\end{frame}

\begin{frame}{Preference for small groups}
The prevalence of groups of a length 1 may stem from the algorithm itself. Since the Walczak's algorithm keeps the alphabet length constant, when due to the crossover or mutation, a single group is missing, \textbf{randomly chosen amino acid} is altered to be in this group.
\end{frame}

\begin{frame}{Frequency standardization}
Normalization by the global amino acid frequency removes the taxon-specific amino acid bias.

The global amino acid frequency is very similar to the amino acid frequency in mature proteins, because they are the majority in our data set. 
\end{frame}

\begin{frame}
<<echo=FALSE,results='asis',message=FALSE,fig.height=5>>=
mean_cooc <- group_by(aa_freq, alph_size, Var1) %>% 
  summarise(value = mean(value)) %>% 
  
  mutate(five_lowest = value <= quantile(value, probs = 0.25)) %>% 
  ungroup

ggplot(mean_cooc, aes(x = Var1, y = value, fill = five_lowest)) +
  geom_col() +
  facet_wrap(~ alph_size, ncol = 2) +
  scale_x_discrete("Amino acid") +
  scale_y_continuous("Mean co-occurence") +
  scale_fill_discrete("The lowest co-ocurences") +
  my_theme


@

Only fours residues had constantly the lowest co-occurence: A, C, L and S.
\end{frame}


\begin{frame}
<<echo=FALSE,results='asis',message=FALSE,fig.height=5>>=
ngram_counts_normalized <- read.csv2("./results/ngram_counts_normalized.csv")

filter(ngram_counts_normalized, type == "Mature protein") %>% 
  ggplot(aes(x = source, y = norm_nvalue2, fill = separates)) +
  geom_col(position = "dodge") +
  facet_wrap(~ aa) +
  geom_hline(yintercept = 1) +
  scale_y_continuous("Normalized amino acid frequency", breaks = c(0, 1, 2)) +
  scale_fill_manual("Low co-occurence\namino acids", values = c("lightblue3", "gold2")) +
  my_theme +
  theme(legend.position = "right") +
  ggtitle("Mature protein")
@

\end{frame}


\begin{frame}
<<echo=FALSE,results='asis',message=FALSE,fig.height=5>>=
ngram_counts_normalized <- read.csv2("./results/ngram_counts_normalized.csv")

filter(ngram_counts_normalized, type == "Signal peptide") %>% 
  ggplot(aes(x = source, y = norm_nvalue2, fill = separates)) +
  geom_col(position = "dodge") +
  facet_wrap(~ aa) +
  geom_hline(yintercept = 1) +
  scale_y_continuous("Normalized amino acid frequency", breaks = c(0, 1, 2)) +
  scale_fill_manual("Low co-occurence\namino acids", values = c("lightblue3", "gold2")) +
  my_theme +
  theme(legend.position = "right") +
  ggtitle("Signal peptide")
@

\end{frame}

\begin{frame}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
freq_df <- read.csv("./results/signal_freq_reduced3.csv")

pca_df <- select(freq_df, -status, -taxon, -prot) %>%
  as.matrix %>%
  prcomp(center = TRUE, scale = TRUE) %>%
  getElement("x") %>%
  data.frame() %>%
  cbind(select(freq_df, status, taxon, prot), .) %>% 
  mutate(taxon = factor(taxon, labels = c("Eukaryotes", "Gram-negative", "Gram-positive")),
         status = factor(status, labels = c("Mature protein", "Signal peptide")))

plot_pca <- function(pca)
  ggplot(pca, aes(x = PC1, y = PC2, color = taxon, fill = taxon)) + 
  stat_density2d(aes(fill=taxon, alpha=..level.., linetype = status), 
                 color = "black",
                 contour = TRUE, geom="polygon") +
  scale_shape_discrete("") +
  scale_fill_discrete("") +
  scale_linetype_manual(values = c("solid", "dashed")) +
  scale_alpha_continuous(range = c(0.15, 0.3)) +
  guides(alpha = FALSE) +
  my_theme

filter(pca_df, status == "Signal peptide") %>% 
  plot_pca() + 
  guides(linetype = FALSE) 
  #ggtitle("PCA częstości aminokwasów w peptydach sygnałowych")
@  

PCA of amino acid frequency in signal peptides (reduced alphabet).
\end{frame}  

\begin{frame}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
filter(pca_df, status == "Signal peptide") %>% 
  plot_pca() +  
  guides(linetype = FALSE) +
  facet_wrap(~ taxon)
  #ggtitle("PCA częstości aminokwasów w peptydach sygnałowych")
@  

PCA of amino acid frequency in signal peptides (reduced alphabet).
\end{frame}  

\begin{frame}{Summary}
\begin{itemize}
\item Mean $\chi^2$ is not the appropriate fitness measure.
\item Repeats of spefic amino acids (A, C, L and S) are typical for signal peptides \citep{labaj_single_2010}.
\end{itemize}
\end{frame}  

\begin{frame}{Acknowledgments}
National Science Center.


\includegraphics[width=0.55\textwidth]{static_figure/logo.png}

\end{frame}  

\begin{frame}[allowframebreaks]
        \frametitle{References}
  \bibliographystyle{apalike}
  \bibliography{references}
\end{frame}  


\end{document}